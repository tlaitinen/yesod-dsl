~{concatMap handler $ routeHandlers r} 

module ~{moduleName m}.~{routeModuleName} (
~{indent 4 $ intercalate ",\n" $ map exportHandler $ routeHandlers r}    ) where
import Prelude
import YesodDsl
import ~{moduleName m}.DB
import Network.HTTP.Affjax as A
import Network.HTTP.Method as A
import Data.Maybe (Maybe(..))
import Data.URI.Query as URIQ
import Data.Argonaut.Encode (encodeJson)
~{concatMap importHandler $ routeHandlers r}

data ~{routeModuleName}R a = 
~{indent 4 $ intercalate " |\n" $ map (rstrip . handlerRequestDataType) $ routeHandlers r} 

instance yesodDslRequest~{routeModuleName}R :: YesodDslRequest (~{routeModuleName}R a) where
    yesodDslRequest baseUrl headers x = case x of
~{indent 8 $ concatMap handlerRequest $ routeHandlers r}
