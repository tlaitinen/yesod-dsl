newtype ~{handlerEntityName} = ~{handlerEntityName} {
~{indent 4 $ intercalate ",\n" $ map field $ handlerOutputFields m h}}

instance decodeJson~{handlerEntityName} :: DecodeJson ~{handlerEntityName} where
    decodeJson json = do
        x <- decodeJson json
~{indent 8 $ concatMap decodeJsonExtract $ handlerOutputFields m h}
        pure $ ~{handlerEntityName} {
~{indent 12 $ intercalate ",\n" $ map decodeJsonAssign $ handlerOutputFields m h}        }

newtype ~{handlerEntityName}Query = ~{handlerEntityName}Query {
~{indent 4 $ intercalate ",\n" $ map inputField $ handlerInputFields h}}

instance toURIQuery~{handlerEntityName}Query :: ToURIQuery ~{handlerEntityName}Query where
    toURIQuery (~{handlerEntityName}Query q) = URIT.Query $
~{indent 8 $ concatMap toURIQuery $ handlerInputFields h}        SM.empty 

get~{handlerEntityName} :: forall e. Affjax.URL~{concatMap (prepend " -> ") $ map snd $ routePathParams r} -> Array RH.RequestHeader -> ~{handlerEntityName}Query -> Aff.Aff (ajax :: Affjax.AJAX | e) (Either String (Result ~{handlerEntityName}))
get~{handlerEntityName} baseUrl~{concatMap (prepend " ") $ map fst $ routePathParams r} headers query = do
    r <- Affjax.affjax $ Affjax.defaultRequest {
        url = baseUrl~{routePathUrl r} ++ URIQ.printQuery (toURIQuery query),
        headers = headers
    }
    pure $ jsonParser r.response >>= decodeJson

