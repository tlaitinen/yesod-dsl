module ~{moduleName m}.~{routeModuleName}.~{handlerModuleName h} where
import ~{moduleName m}.DB
import Prelude
import YesodDsl
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Combinators ((~>), (:=), (.?))
import Data.Argonaut.Parser (jsonParser)
import Data.Argonaut.Core (jsonEmptyObject, Json)
import Control.Monad.Aff as Aff
import Data.Maybe (Maybe(Just))
import Data.Either (Either(..))
import Network.HTTP.Affjax as Affjax
import Network.HTTP.RequestHeader as RH
import Network.HTTP.Method (Method(POST, PUT, DELETE))
import Network.HTTP.StatusCode as SC
import Optic.Core
import Data.URI.Types as URIT
import Data.URI.Query as URIQ

type ~{handlerEntityName h} = {
~{indent 4 $ intercalate ",\n" $ map field $ handlerOutputFields m h}}

newtype ~{handlerEntityName h}P = ~{handlerEntityName h}P ~{handlerEntityName h}

instance decodeJson~{handlerEntityName h}P :: DecodeJson ~{handlerEntityName h}P where
    decodeJson json = do
        x <- decodeJson json
~{indent 8 $ concatMap decodeJsonExtract $ handlerOutputFields m h}
        pure $ ~{handlerEntityName h}P {
~{indent 12 $ intercalate ",\n" $ map decodeJsonAssign $ handlerOutputFields m h}        }

type ~{handlerTypeName h}~{routeModuleName}Params = {
~{indent 4 $ intercalate ",\n" $ map inputField $ getHandlerInputFields h}
}

newtype ~{handlerTypeName h}~{routeModuleName}ParamsP = ~{handlerTypeName h}~{routeModuleName}ParamsP ~{handlerTypeName h}~{routeModuleName}Params

instance toURIQuery~{handlerTypeName h}~{routeModuleName}ParamsP :: ToURIQuery ~{handlerTypeName h}~{routeModuleName}ParamsP where
    toURIQuery (~{handlerTypeName h}~{routeModuleName}ParamsP x) = dropEmptyQueryParams $
~{indent 8 $ concatMap toURIQuery $ getHandlerInputFields h}        emptyQuery

