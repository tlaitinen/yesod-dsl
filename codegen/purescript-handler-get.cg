newtype ~{handlerEntityName} = ~{handlerEntityName} {
~{indent 4 $ intercalate ",\n" $ map field $ handlerOutputFields m h}}

instance decodeJson~{handlerEntityName} :: DecodeJson ~{handlerEntityName} where
    decodeJson json = do
        x <- decodeJson json
~{indent 8 $ concatMap decodeJsonExtract $ handlerOutputFields m h}
        pure $ ~{handlerEntityName} {
~{indent 12 $ intercalate ",\n" $ map decodeJsonAssign $ handlerOutputFields m h}        }

newtype ~{handlerEntityName}Query = ~{handlerEntityName}Query URIT.Query 

~{lowerFirst $ handlerEntityName}Query :: Maybe Int -> Maybe Int -> ~{handlerEntityName}Query
~{lowerFirst $ handlerEntityName}Query s l = ~{handlerEntityName}Query $ paginationQuery s l

~{concatMap inputFieldSetter $ handlerInputFields h}

get~{handlerEntityName} :: forall e. Affjax.URL~{concatMap (prepend " -> ") $ map snd $ routePathParams r} -> Array RH.RequestHeader -> ~{handlerEntityName}Query -> Aff.Aff (ajax :: Affjax.AJAX | e) (Either String (Result ~{handlerEntityName}))
get~{handlerEntityName} baseUrl~{concatMap (prepend " ") $ map fst $ routePathParams r} headers (~{handlerEntityName}Query query) = do
    r <- Affjax.affjax $ Affjax.defaultRequest {
        url = baseUrl~{routePathUrl r} ++ URIQ.printQuery query,
        headers = headers
    }
    pure $ jsonParser r.response >>= decodeJson

