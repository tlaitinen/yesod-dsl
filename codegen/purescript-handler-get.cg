newtype ~{handlerEntityName} = ~{handlerEntityName} {
~{indent 4 $ intercalate ",\n" $ map field $ outputFields h}}

instance decodeJson~{handlerEntityName} :: DecodeJson ~{handlerEntityName} where
    decodeJson json = do
        x <- decodeJson json
~{indent 8 $ concatMap decodeJsonExtract $ outputFields h}
        pure $ ~{handlerEntityName} {
~{indent 12 $ intercalate ",\n" $ map decodeJsonAssign $ outputFields h}        }


~{lowerFirst handlerEntityName} :: forall e. Affjax.URL~{concatMap (prepend " -> ") $ map snd $ routePathParams r} -> Array RH.RequestHeader -> Aff.Aff (ajax :: Affjax.AJAX | e) (Either String (Result ~{handlerEntityName}))
~{lowerFirst handlerEntityName} baseUrl~{concatMap (prepend " ") $ map fst $ routePathParams r} headers = do
    r <- Affjax.affjax $ Affjax.defaultRequest {
            url = baseUrl~{routePathUrl r},
            headers = headers
        }
    pure $ jsonParser r.response >>= decodeJson

