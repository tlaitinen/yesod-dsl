{-# LANGUAGE TemplateHaskell #-}
module ~{moduleName m}Client.~{handlerEntityName} where

import qualified Data.Aeson as A
import qualified Network.Wreq as W
import qualified Network.Wreq.Session as WS
import qualified Network.Wreq.Types as WT
import qualified Data.Aeson.TH as AT

import ~{moduleName m}Client.Types
import ~{moduleName m}Client.Enums

data Request = Request {
~{indent 4 $ intercalate ",\n" $ map inputField $ handlerInputFields h}}

$(AT.deriveJSON AT.defaultOptions ''Request)

~{defineResultType}
~{methodName} :: WS.Session -> WT.Options -> String~{concatMap (prepend " -> ") $ map snd $ routePathParams r} -> Request -> IO (W.Response Result)
~{methodName} baseUrl~{concatMap (prepend " ") $ map fst $ routePathParams r} request = W.asJSON =<< WS.~{methodName}Eith opts s (baseUrl~{routePathUrl r}) request  

