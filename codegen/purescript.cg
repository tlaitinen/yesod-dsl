module ~{moduleName m} where
import Prelude
import Data.Argonaut.Combinators ((~>), (:=), (.?))
import Data.Argonaut.Parser (jsonParser)
import Data.Argonaut.Core (jsonEmptyObject, Json)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Maybe (Maybe(..), fromMaybe)
import Data.Generic (class Generic, gCompare, gEq)
import Data.Either (Either(..))
import Data.URI as URI
import Data.URI.Types as URIT
import Data.URI.Query as URIQ
import Control.Monad.Aff as Aff
import Network.HTTP.Affjax as Affjax
import Network.HTTP.RequestHeader as RH
import Network.HTTP.Method (Method(POST, PUT, DELETE))
import Network.HTTP.StatusCode as SC
import Data.String as DS
import Data.Date as DD
import Data.Time as DT
import Data.String.Regex as R
import Data.StrMap as SM
import Data.BigInt
import YesodDsl

        
~{concatMap enum $ modEnums m}
~{concatMap entity $ modEntities m}

